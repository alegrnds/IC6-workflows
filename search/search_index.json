{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Functions Welcome to my website! Here, you can learn about different functions that can be useful on your day to day life!","title":"Home"},{"location":"#functions","text":"Welcome to my website! Here, you can learn about different functions that can be useful on your day to day life!","title":"Functions"},{"location":"area_of_rectangle/","text":"Calculates the area of a rectangle Parameters: width ( float ) \u2013 width of the rectangle height ( float ) \u2013 height of the rectangle Returns: area ( float ) \u2013 area of the rectangle Source code in functions.py 58 59 60 61 62 63 64 65 66 67 68 69 70 def area_of_rectangle ( width : float , height : float ) -> float : \"\"\"Calculates the area of a rectangle Args: width: width of the rectangle height: height of the rectangle Returns: area: area of the rectangle \"\"\" area = width * height return area","title":"Area of a rectangle"},{"location":"explanation/","text":"Explanation This section provides a deeper understanding of the concepts and reasoning behind the functions and calculations used in this project. Here, you\u2019ll learn why the functions behave the way they do and the principles behind the logic and formulas. Thermostat Logic ( my_thermo_stat ) The thermostat function determines whether to turn on the heat, the AC, or stay off based on the current temperature ( temp ) and the desired temperature ( desired_temp ). Heat triggers when the room is significantly colder than desired ( temp < desired_temp - 5 ). AC triggers when the room is significantly hotter than desired ( temp > desired_temp + 5 ). Off occurs when the temperature is within \u00b15 degrees of the desired value. This \u00b15 degree range provides a buffer to prevent wear out the system of the thermostat and be inefficient. Rectangle Calculations ( area_of_rectangle , perimeter_of_rectangle ) Area : The area of a rectangle is calculated as width \u00d7 height . This represents the amount of space inside the rectangle. Perimeter : The perimeter is 2 \u00d7 (width + height) , which measures the total length around the rectangle. These formulas come directly from basic geometry and are implemented in functions to allow repeated calculation without rewriting the logic. Simple Arithmetic ( my_adder ) The my_adder function adds two numbers together. This illustrates the concept of reusable functions , where a single definition can perform the same operation on different inputs. String Checks ( have_digits ) The have_digits function checks whether a string contains any digits. Conceptually, this demonstrates iteration and condition checking : The function loops through each character of the string. It uses a conditional check ( c.isdigit() ) to identify numbers. It stops as soon as a digit is found, showing efficient early termination . How to Use This Section This section is for understanding why the functions work , not for running them step-by-step. To see practical usage, refer to the Tutorials and How-to Guides . References Geometry basics: area and perimeter formulas. Basic programming concepts: loops, conditionals, and reusable functions. Thermostat control logic: practical buffering to avoid frequent toggling.","title":"Explanation"},{"location":"explanation/#explanation","text":"This section provides a deeper understanding of the concepts and reasoning behind the functions and calculations used in this project. Here, you\u2019ll learn why the functions behave the way they do and the principles behind the logic and formulas.","title":"Explanation"},{"location":"explanation/#thermostat-logic-my_thermo_stat","text":"The thermostat function determines whether to turn on the heat, the AC, or stay off based on the current temperature ( temp ) and the desired temperature ( desired_temp ). Heat triggers when the room is significantly colder than desired ( temp < desired_temp - 5 ). AC triggers when the room is significantly hotter than desired ( temp > desired_temp + 5 ). Off occurs when the temperature is within \u00b15 degrees of the desired value. This \u00b15 degree range provides a buffer to prevent wear out the system of the thermostat and be inefficient.","title":"Thermostat Logic (my_thermo_stat)"},{"location":"explanation/#rectangle-calculations-area_of_rectangle-perimeter_of_rectangle","text":"Area : The area of a rectangle is calculated as width \u00d7 height . This represents the amount of space inside the rectangle. Perimeter : The perimeter is 2 \u00d7 (width + height) , which measures the total length around the rectangle. These formulas come directly from basic geometry and are implemented in functions to allow repeated calculation without rewriting the logic.","title":"Rectangle Calculations (area_of_rectangle, perimeter_of_rectangle)"},{"location":"explanation/#simple-arithmetic-my_adder","text":"The my_adder function adds two numbers together. This illustrates the concept of reusable functions , where a single definition can perform the same operation on different inputs.","title":"Simple Arithmetic (my_adder)"},{"location":"explanation/#string-checks-have_digits","text":"The have_digits function checks whether a string contains any digits. Conceptually, this demonstrates iteration and condition checking : The function loops through each character of the string. It uses a conditional check ( c.isdigit() ) to identify numbers. It stops as soon as a digit is found, showing efficient early termination .","title":"String Checks (have_digits)"},{"location":"explanation/#how-to-use-this-section","text":"This section is for understanding why the functions work , not for running them step-by-step. To see practical usage, refer to the Tutorials and How-to Guides .","title":"How to Use This Section"},{"location":"explanation/#references","text":"Geometry basics: area and perimeter formulas. Basic programming concepts: loops, conditionals, and reusable functions. Thermostat control logic: practical buffering to avoid frequent toggling.","title":"References"},{"location":"have_digits/","text":"Checks if a string has digits in it Parameters: s ( str ) \u2013 string Returns: out ( int ) \u2013 0 if it doesn't contain digits and 1 if it does Source code in functions.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def have_digits ( s : str ) -> int : \"\"\"Checks if a string has digits in it Args: s: string Returns: out: 0 if it doesn't contain digits and 1 if it does \"\"\" out = 0 # loop through the string for c in s : # check if the character is a digit if c . isdigit (): out = 1 break return out","title":"Have digit"},{"location":"how_to_guides/","text":"How-to: Control the thermostat with my_thermo_stat this guide shows how to determine whether the thermostat should run the heat, the AC, or stay off, using the my_thermo_stat function. Steps First step, define the current room temperature ( temp ) and the preferred temperature ( desired_temp ): temp = 65 desired_temp = 70 Second step, call the function with these values: status = my_thermo_stat(temp, desired_temp) Third step, print the returned value to check what the thermostat should do: print(status) #Should print out Heat Fourth step, try different values to see how the thermostat responds: print(my_thermo_stat(80, 70)) # AC print(my_thermo_stat(72, 70)) # off","title":"How to Guide"},{"location":"how_to_guides/#how-to-control-the-thermostat-with-my_thermo_stat","text":"this guide shows how to determine whether the thermostat should run the heat, the AC, or stay off, using the my_thermo_stat function.","title":"How-to: Control the thermostat with my_thermo_stat"},{"location":"how_to_guides/#steps","text":"First step, define the current room temperature ( temp ) and the preferred temperature ( desired_temp ): temp = 65 desired_temp = 70 Second step, call the function with these values: status = my_thermo_stat(temp, desired_temp) Third step, print the returned value to check what the thermostat should do: print(status) #Should print out Heat Fourth step, try different values to see how the thermostat responds: print(my_thermo_stat(80, 70)) # AC print(my_thermo_stat(72, 70)) # off","title":"Steps"},{"location":"my_adder/","text":"function to sum the 3 numbers Parameters: a ( float ) \u2013 float b ( float ) \u2013 float c ( float ) \u2013 float Returns: out ( float ) \u2013 the total sum of the three numbers Source code in functions.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def my_adder ( a : float , b : float , c : float ) -> float : \"\"\"function to sum the 3 numbers Args: a: float b: float c: float Returns: out: the total sum of the three numbers \"\"\" out = a + b + c return out","title":"My adder"},{"location":"my_thermo_stat/","text":"Changes the status of the thermostat based on temperature and desired temperature Parameters: temp ( int ) \u2013 actual temperature desired_temp ( int ) \u2013 temperature you'd like Returns: status ( str ) \u2013 status of the thermostat Source code in functions.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def my_thermo_stat ( temp : int , desired_temp : int ) -> str : \"\"\" Changes the status of the thermostat based on temperature and desired temperature Args: temp: actual temperature desired_temp: temperature you'd like Returns: status: status of the thermostat \"\"\" if temp < desired_temp - 5 : status = \"Heat\" elif temp > desired_temp + 5 : status = \"AC\" else : status = \"off\" return status","title":"My thermo stat"},{"location":"perimeter_of_rectangle/","text":"Calculates the perimeter of a rectangle Parameters: width ( float ) \u2013 width of the rectangle height ( float ) \u2013 height of the rectangle Returns: perimeter ( float ) \u2013 perimeter of the rectangle Source code in functions.py 72 73 74 75 76 77 78 79 80 81 82 83 def perimeter_of_rectangle ( width : float , height : float ) -> float : \"\"\"Calculates the perimeter of a rectangle Args: width: width of the rectangle height: height of the rectangle Returns: perimeter: perimeter of the rectangle \"\"\" perimeter = 2 * ( width + height ) return perimeter","title":"Perimeter of a rectangle"},{"location":"reference/","text":"Reference Overview Welcome to the reference section! This section provides detailed information about the functions available in this project. Each page describes the function\u2019s purpose, its inputs and outputs. Use this section when you need to look up how a function works or check its parameters. Organization The reference section is organized by function: My adder: A simple function to add two nmbers. My thermo stat: Determines thermostat actions based on current and desired temperature. Perimeter of a rectangle: Computes the perimeter of a rectangle. Area of a rectangle: Computes the area of a rectangle. Have digit: Checks if a string contains any digits. How to use this reference Click on a function name in the sidebar. Read the description, arguments, and return value. Check the Tutorials and How-to to see how the function is used in practice","title":"Reference Overview"},{"location":"reference/#reference-overview","text":"Welcome to the reference section! This section provides detailed information about the functions available in this project. Each page describes the function\u2019s purpose, its inputs and outputs. Use this section when you need to look up how a function works or check its parameters.","title":"Reference Overview"},{"location":"reference/#organization","text":"The reference section is organized by function: My adder: A simple function to add two nmbers. My thermo stat: Determines thermostat actions based on current and desired temperature. Perimeter of a rectangle: Computes the perimeter of a rectangle. Area of a rectangle: Computes the area of a rectangle. Have digit: Checks if a string contains any digits.","title":"Organization"},{"location":"reference/#how-to-use-this-reference","text":"Click on a function name in the sidebar. Read the description, arguments, and return value. Check the Tutorials and How-to to see how the function is used in practice","title":"How to use this reference"},{"location":"test/","text":"area_of_rectangle ( width , height ) Calculates the area of a rectangle Parameters: width ( float ) \u2013 width of the rectangle height ( float ) \u2013 height of the rectangle Returns: area ( float ) \u2013 area of the rectangle Source code in functions.py 58 59 60 61 62 63 64 65 66 67 68 69 70 def area_of_rectangle ( width : float , height : float ) -> float : \"\"\"Calculates the area of a rectangle Args: width: width of the rectangle height: height of the rectangle Returns: area: area of the rectangle \"\"\" area = width * height return area have_digits ( s ) Checks if a string has digits in it Parameters: s ( str ) \u2013 string Returns: out ( int ) \u2013 0 if it doesn't contain digits and 1 if it does Source code in functions.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def have_digits ( s : str ) -> int : \"\"\"Checks if a string has digits in it Args: s: string Returns: out: 0 if it doesn't contain digits and 1 if it does \"\"\" out = 0 # loop through the string for c in s : # check if the character is a digit if c . isdigit (): out = 1 break return out my_adder ( a , b , c ) function to sum the 3 numbers Parameters: a ( float ) \u2013 float b ( float ) \u2013 float c ( float ) \u2013 float Returns: out ( float ) \u2013 the total sum of the three numbers Source code in functions.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def my_adder ( a : float , b : float , c : float ) -> float : \"\"\"function to sum the 3 numbers Args: a: float b: float c: float Returns: out: the total sum of the three numbers \"\"\" out = a + b + c return out my_thermo_stat ( temp , desired_temp ) Changes the status of the thermostat based on temperature and desired temperature Parameters: temp ( int ) \u2013 actual temperature desired_temp ( int ) \u2013 temperature you'd like Returns: status ( str ) \u2013 status of the thermostat Source code in functions.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def my_thermo_stat ( temp : int , desired_temp : int ) -> str : \"\"\" Changes the status of the thermostat based on temperature and desired temperature Args: temp: actual temperature desired_temp: temperature you'd like Returns: status: status of the thermostat \"\"\" if temp < desired_temp - 5 : status = \"Heat\" elif temp > desired_temp + 5 : status = \"AC\" else : status = \"off\" return status perimeter_of_rectangle ( width , height ) Calculates the perimeter of a rectangle Parameters: width ( float ) \u2013 width of the rectangle height ( float ) \u2013 height of the rectangle Returns: perimeter ( float ) \u2013 perimeter of the rectangle Source code in functions.py 72 73 74 75 76 77 78 79 80 81 82 83 def perimeter_of_rectangle ( width : float , height : float ) -> float : \"\"\"Calculates the perimeter of a rectangle Args: width: width of the rectangle height: height of the rectangle Returns: perimeter: perimeter of the rectangle \"\"\" perimeter = 2 * ( width + height ) return perimeter","title":"Test"},{"location":"test/#functions.area_of_rectangle","text":"Calculates the area of a rectangle Parameters: width ( float ) \u2013 width of the rectangle height ( float ) \u2013 height of the rectangle Returns: area ( float ) \u2013 area of the rectangle Source code in functions.py 58 59 60 61 62 63 64 65 66 67 68 69 70 def area_of_rectangle ( width : float , height : float ) -> float : \"\"\"Calculates the area of a rectangle Args: width: width of the rectangle height: height of the rectangle Returns: area: area of the rectangle \"\"\" area = width * height return area","title":"area_of_rectangle"},{"location":"test/#functions.have_digits","text":"Checks if a string has digits in it Parameters: s ( str ) \u2013 string Returns: out ( int ) \u2013 0 if it doesn't contain digits and 1 if it does Source code in functions.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 def have_digits ( s : str ) -> int : \"\"\"Checks if a string has digits in it Args: s: string Returns: out: 0 if it doesn't contain digits and 1 if it does \"\"\" out = 0 # loop through the string for c in s : # check if the character is a digit if c . isdigit (): out = 1 break return out","title":"have_digits"},{"location":"test/#functions.my_adder","text":"function to sum the 3 numbers Parameters: a ( float ) \u2013 float b ( float ) \u2013 float c ( float ) \u2013 float Returns: out ( float ) \u2013 the total sum of the three numbers Source code in functions.py 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def my_adder ( a : float , b : float , c : float ) -> float : \"\"\"function to sum the 3 numbers Args: a: float b: float c: float Returns: out: the total sum of the three numbers \"\"\" out = a + b + c return out","title":"my_adder"},{"location":"test/#functions.my_thermo_stat","text":"Changes the status of the thermostat based on temperature and desired temperature Parameters: temp ( int ) \u2013 actual temperature desired_temp ( int ) \u2013 temperature you'd like Returns: status ( str ) \u2013 status of the thermostat Source code in functions.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 def my_thermo_stat ( temp : int , desired_temp : int ) -> str : \"\"\" Changes the status of the thermostat based on temperature and desired temperature Args: temp: actual temperature desired_temp: temperature you'd like Returns: status: status of the thermostat \"\"\" if temp < desired_temp - 5 : status = \"Heat\" elif temp > desired_temp + 5 : status = \"AC\" else : status = \"off\" return status","title":"my_thermo_stat"},{"location":"test/#functions.perimeter_of_rectangle","text":"Calculates the perimeter of a rectangle Parameters: width ( float ) \u2013 width of the rectangle height ( float ) \u2013 height of the rectangle Returns: perimeter ( float ) \u2013 perimeter of the rectangle Source code in functions.py 72 73 74 75 76 77 78 79 80 81 82 83 def perimeter_of_rectangle ( width : float , height : float ) -> float : \"\"\"Calculates the perimeter of a rectangle Args: width: width of the rectangle height: height of the rectangle Returns: perimeter: perimeter of the rectangle \"\"\" perimeter = 2 * ( width + height ) return perimeter","title":"perimeter_of_rectangle"},{"location":"tutorials/","text":"Tutorials In this page, we are going to learn how to use the area of the rectangle function ! Functions are really good when we want to calculate a quantity with different numbers, but do not want to repeat the operation over and over again. Imagine you have 5 different rectangles, and you are tasked to calculate the area of them. Instead of taking the calculator, you can calculate it using this function! I recommend looking at documentation and know what type of variable the function takes. Now that you are familiar with the function, we can get started! First, we have to define the width and height of the rectangle. width = 3.00 height = 5.00 With the variables defined, we know can use the function: a = area_of_rectangle(width, height) print(a) #should output 15.0 Try changing the values of width and height youself to see how the result changes!","title":"Tutorials"},{"location":"tutorials/#tutorials","text":"In this page, we are going to learn how to use the area of the rectangle function ! Functions are really good when we want to calculate a quantity with different numbers, but do not want to repeat the operation over and over again. Imagine you have 5 different rectangles, and you are tasked to calculate the area of them. Instead of taking the calculator, you can calculate it using this function! I recommend looking at documentation and know what type of variable the function takes. Now that you are familiar with the function, we can get started! First, we have to define the width and height of the rectangle. width = 3.00 height = 5.00 With the variables defined, we know can use the function: a = area_of_rectangle(width, height) print(a) #should output 15.0 Try changing the values of width and height youself to see how the result changes!","title":"Tutorials"}]}